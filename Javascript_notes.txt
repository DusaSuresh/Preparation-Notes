		JAVASCRIPT (Dynamically Typed Language)
		==========
		" Javascript is a "synchronous single threaded" language.
		
	-> Mid 1990 internet boom
	-> Internet Explorer / NetScape
	-> Netscape hired developer --> Brandon Eich --> Father of Javascript --> To develop scripting language in 10days.
	-> It is named as Moca --> then as 'Live script' --> then as 'Javascript' when they colloborated with Sunmicrosystems.
	-> Javascript is interpreted language, which will executed line by line.
		Javascript --> Source code --> Interpeter --> Output
	-> An interpreted script language consisting of oops concepts like encapsulation, inheritance, polymorpism.
	-> Javascript runs on every browser, Browser has the js engines.
		Internet Explorer(IE) --> Chakra, Morzilla --> Spider Monkey , Chrome - V8 Engine.
	-> Why it is popular -->
		--> Easy to learn
		--> It is based on ECMA internation standards.(ECMA script specification)
		--> Biggest community.
		--> Can be used both in front end and backend.
		--> Performance of the application.
		--> Multiple f/w.
	-> ECMA5/ECMA6 --> Popular standards. Latest launched ECMA11 in 2020
	-> ECMA6 Features --> let, const, arrow function, promises,collections etc, blocked scopes
	
How Javascript loads in browser: =>
=====================================

	-> Every browser has javascript engine, in this engine only javascript runs.
	-> Engine has two parsers 1) Preparser 2) Parser.
	-> Parsers will parse the byte code stream data from servers.

DOM(Document Object Model): =>
==============================

	-> html is the root tag of the DOM.
	-> It is nothing but the tree structure of html elements in the node structure is called DOM.
	-> Using this structure only javascript will be accessing the elements.
	
	-> let welcomeBtn = document.querySelector('button');
	   welcomeBtn.addEventListener('click', showMsg);
	   
Script Loading Strategies: =>
==============================

	-> Script loading done should be at bottom of the hmtl file. Because all elements should be available in DOM before manupulation of it.
	-> document.addEventListener('DOMContentLoaded', function(){}), If we add this in the script file, then it will make sure to load the DOM first, then execute the script.
	-> If we are loading external script file and wanted to place it in head tag, then use "defer" attribute. It will load first html+css then js.
	-> "async" is also do the same process but this will load all the files asynchronously if don't have any dependency on order of script files load.
	
Basics of Programming: =>
==========================

	-> case sensitive.
	-> ; used to end the statement.
	-> // single line comment , /* */ multiple line comments.
	-> In js, there is not need to specify the data types. It will automatically converts into specific type.
	-> Primitive Datatypes:
	
		Boolean -> true or false
		undefined -> Declare a variable and not assigned any value to it. Then that value will be undefined.
		String -> Stores the string.
		null -> Absence of value, currently doesn't have value but we can assign it further.
		Number -> integer, float, hexadecimal
		
	-> User Defined Datatypes: Objects and Functions.
	-> typeof : -> This operator to check the type of variable. like boolean, integer, string etc.
	-> typeof null is Object.
	-> typeof undefined is undefined.
	
Variables: => 
==============
	-> Variables is nothing but container for value. which stores the value of the object.
	-> Types of variable declaration : let, const, variable
	-> Variables name is case sensitive. We cann't use keywords names as variable names.

Operators: =>
=============
	-> Binary Operator -> operand operator operand ( +, - , * etc). If we add + infront of string number, then it will convert into number.(Eg: +"7")
	-> Urinary Operator -> ++, --
	-> Assignment Operator -> =
	-> Comparator Operator -> ==, !=, ===(Strict equal), >, <, >=, <=
	-> Conditional Operator -> &&,||
	
Control Flow Statements: =>
===========================

	-> if(condition){}else{}
	-> switch(condition) { case 1: statement break, case 2 statement break; default break;}
	
Loops: => 5 loops in js: ==>
============================

	-> 1) for 2) do ..while 3) while 4) for in 5) for of
	-> 4) for(let key in animal){console.log(animal[key]}
			let animal = { name : "lion", color: "yellow"}
	    let names =["suresh", "ramesh", "naresh"];
			for(let index in names){ console.log(names[index])}
	   5) for(let name of names){ console.log(name)}
	   
Functions in javascript: =>
===========================

	-> function name(param1, param2){ .... }, if param is not passed, then value will be null.
	->let sayHi = function() { alert( "Hello" );};
	
Strings: ==> 
============

	-> To convert string number to number ==> Number(String number) Eg: Number(123) ==> 123
	-> Number to String ==> number.toString() ==> Eg: 123.toString();
	-> Template literals ==> ``
			-> Using this template literals, no need to concat using symbol "+" ==> Eg: `$(variable) you've scored`
			-> No need to use the escape character, if we use this literals.
			
	-> Methods in String: =>
			-> lenght(), split(), concat(), charAt(), indexOf(), toUpperCase()
			-> let str = "suresh" ==> str[0] ==> same
			
Reference Datatypes: ==>
========================
	-> Objects:==>
	
	-> let animal = {name: "cow",legs: 4 }
	-> We can access elements using 2 notations.
	-> . notations -> animal.name  || Bracket notation -> animal["legs"]
	
	-> Arrays: ==>
	
	-> let arr = ["one","two","three"]
	-> arr[1]
	
Type Conversion : => (Implicit/Explicit)(Coercion)
====================
	const val1 = 5;
	const val2 = '9';
	console.log(val1 + val2) ==> 59 ==> It is converted into string with concact with the number.
	val1+Number(val2) ==> 14
	
	Types of conversion done in ==> string , bool, number
	
	-> String(123) ==> Explicit conversion
	-> 123 + '' ==> Implicit 
	
	-> Number('123') => Explicit
	-> +'123' => Implicit.
	
	-> "number"+15+3 ==> number153
	-> 15 +3 + "number" ==> 18number
	->[1] > null ==> true
	-> 'true' == true ==> false.
	
Objects: ==>
============

	Type 1: ==>
	------------
	-> Eg: const course = {
							lecture: 10,
							title: "Maths",
							enroll(){
							return "Enrolled";
							}
						}
						
	course.title = "Physics" ==> Even though course obj is const, but we can assign the other values as this is referenced data types. But we cann't assign the const variable which is not in object.
	
	Type 2 ==> Factory function.
	-----------
	
		function createCourse(){  ==> camel case
				return {
							lecture: 10,
							title: "Maths",
							enroll(){
							return "Enrolled";
							}
						}
				}
		
		Accessing obje ==> const course = createCourse();
	
	Type 3 ==> Constructor function
	----------
	
		function Course(title){  ==> Pascal case for constructor name.
			this.title = title;
			this.enroll = function(){
				return "Enrolled";
				}
			}
			
		Accessing obje ==> const course = new Course("javascript"); ==> with new key word, no need to return. This object will be returned automatically.
		
		
	Delete Keyword ==>
	---------------
	
		-> delete.course.title ==> It will delete the variable title.
		-> Add new function ==> course.checkEnrolment = function(){}
		
	-> Primitive datatypes are also objects only, but these are immutable objects.  --> In javascript engine, create the Object with Object keyword.
	-> Functions are also objects, it creates constructor object with the Function name.
	
	Pass by value/reference ==>
	---------------------------
	
		let number = 10; --> Pass by value;
		let obj = {number: 10} ==> let obj2 = obj --> Pass by reference.
			if we change number in obj, this value also will be reflected in obj2 as well because of reference given.
			
	Clone Object ==> ways to clone the object.
	--------------
	
		-> const course_1 = {... course};
		-> const course = Object.assign({}, course) --> {} this empty object, next parameter objects will be cloned into it. we can pass multiple obj.
		-> for(let key of Object.keys(course))
			{	course_1[key] = course[key];}
			
Object oriented Programming (oops): ==>
=======================================

	-> Class --> Class is nothing but the template for creating the objects.
	-> Two types of class syntaxes
		a) class Product{
						constructor(itemname, price, product_code){
						this.itemname = itemname;
						this.price = price;
						this.product_code = product_code;
						}
					}
					
			let pencil = new Product('pencil', 50, 1234);
			
		b) using expression: ==>
		--------------------
		
			const product1 = class {
						constructor(itemname, price, product_code){
						this.itemname = itemname;
						this.price = price;
						this.product_code = product_code;
						}
					}
					
			let chair = new product1('chair', 100, 2345);
		
	-> Getters & Setters methods ==> these methods to get and set the values.
		get getDiscount(), set setDiscount() --> Using this get, set keywords. then no need to use the paranthesis for calling function.
		
	-> Inheritance ==>
	-------------------
		class Product{
			constructor(item){
				this.item = item;
				}
			getItemName(){
				return this.item+"Product";
				}
			}
			
		class SubProduct extends Product{
				constructor(item){
				super(item);
				}
			getItemName(){
				return this.item+"SubProduct";
				}
			}
	-> Super() ==> This calls the parent class constructor.	
	-----------
	
Arrays : ==>
============

-> Primitive arrays methods: ==>
================================

	-> Linear data structure hold the objects.
	-> Declare arrays (2) ways ==> const arrays = [1,2,3,4]; const num = new Array(1,2,3,4);
	-> push -> arrays.push(3) ==> It will add the element at the end of the array.
	-> unshift -> arrays.unshift(4) ==> It will add the element at the start of the array.
	-> pop -> arrays.pop() ==> It will remove last element in an array.
	-> shift -> arrays.shift() ==> It will remove first element in an array.
	-> indexOf -> arrays.indexOf(2) ==> Return the first occurance of the element.
	-> lastIndexOf -> last occurance of element.
	-> includes -> This will return true or false if element exists or not.
	
	-> All above methods are on the primitive data types on strings/numbers.
	
-> Userdefined array methods: ==>
=============================
	
	Eg: const students = [ {name : 'suresh', country: 'india'},{name : 'Mahesh', country: 'US'}]
	
	-> find -> students.find(element =>  {return element.name == 'suresh'}) --> Return the first object which satisfies the condition first.
	
		const names1 = ['one','two','three']; const names2 = ['four','five','six']
	-> concat -> Two concat the arrays. Eg: names1.concat(names2);
	-> slice -> names1.slice(3,5);
	-> spread operator(...) --> Concat two arrays using spread operator --> const names3 = [...names1,...names2]
	
-> Looping objects: ==>
=======================

	-> For loop ==> for(let i=0; i<names.length;i++) { }
	-> For of ==> for(let name of names) { }
	-> ForEach ==> names.forEach(function(name, index ){})
	
	let student = ['s','u','r','e','s','h'];
	
	-> join ==> student.join() ==> s,u,r,e,s,h --> we can separator in join method like student.join('-') ==> s-u-r-e-s-h
	-> split ==> student.split('-')
	
	let names = ['suresh', 'dusa', 'rohan', 'srijay'];
	
	-> filter ==> names.filter(element => element.length > 4 ) ==> ['suresh', 'rohan', 'srijay'] ==> Filters and gives the condition satisfied ele.
	
	let numbers = [1,2,3,4];
	
	-> map ==> numbers.map(element => element*2) ==> [2,4,6,8] ==> Return all the elements with the given operation.
	
	-> reduce ==> numbers.reduce((previousValue, element) => { return previousValue + element.height},0) ==> previousValue has to give 0 value in method and it will stores next values.
	
	-> sort ==> numbers.sort() ==> This will sort on the primitive objectives.
	
	-> every ==> numbers.every(element => {element >3})  ==> Return false as every element not satisfying the condition.
	
	-> some ==> It will return atleast one object satisfies, it will return true else false.
	
	
Execution of Javascript: ==>
============================

	-> Everything in javascript happends in execution context.
	-> It has 2 components.
		1) Memory component(Variable environment)  2) Code Component ( Thread of execution).
	
	-> First it will allocate memory to the all the variables and function. This will called as "Global execution context".
	-> Second it will try to exeucte the code, then if it finds again method inside it. New execution context created for the function and places that 
	   EC in the "Call stack".
	-> Once execution completes for the fist EC, then this will be removed from the call stack.
	-> This process will continues till the first created "Global execution context" deleted from the "CallStack".
	-> This is also called as Hoisting.
	
	-> "CallStack" ==> This will maintain the order of execution of execution contexts. These are also called as below.
		1) Program stack 2) Control Stack 3) Runtime Stack 4) Machine Stack.
		
	var x = 1;
	one();
	two();
	
	function one(){
		var x = 10;
		console.log(x);
		}
		
	function two(){
		var x = 20;
		console.log(x);
		}
	
	Output: 10, 20, 1 ( Concept of hoisting and execution context)
	--------------------------------------------------------------
	
Global execution context, window object and this : ==>
=======================================================

	-> Any javascript file runs on javascript engine, it will create by default GEC, window, this.
	-> Global object of browser is called as window object.
	-> this === window ==> true
	-> Anything which is not inside in function is nothing but it is in "global scope".
	-> Empty javascript file also global window object will be created.
	
Undefined/not defined: ==>
==========================

	-> undefined -> It is nothing but allocated memory with the value undefined.
	-> not defined -> Variable it self not defined, then will have error reference is not defined.
	
The scope chain: ==>
====================

	-> Lexical environment -> Whenever ExC created, there lexical environment also got created.
	-> Lexical env is local memory along with lexical env of parent.
	-> Lexical is nothing but in heirarchy.
	-> GEC lexical environment is null as it don't have any parent.
	-> If we are trying to access any variable in function, first it will check in the local memory and then in lexical env(parent's memory).
	-> scope chain -> Going through the lexical environments of the parent's is nothing but scope chain.
	-> lexical environment is nothing but the closure.
	
let & const in JS: ==>
======================

	-> let & const declaration are hoisted but in different way not like var.
	-> let & const also allocated memory before execution but not in the global scope instead of in script scope.
	-> Temporal dead zone -> Time between memory allocation and assigning value to it is nothing but TDZ.
	-> 
		Eg: console.log(a); --> undefined
			console.log(b); --> Reference error, can't access b before initialization ( As this will not be allocated in global object (window object)
			var a = 10;
			let b = 20;
	-> we cann't declare the same variable name with the "let" key word.(Eg: let a =10; let a=20; we can't declare)
	-> we can declare the same variable with the "var" keyword.( Eg: var a=10; var a=20; it is possible)
	
	-> const: ==> const is also same as let but it more strict than the let.
	-> const should be initialized while declaring it.
		Eg: const a =10; --> this is correct
			const a; a=10; --> this is not possible.
			
	-> Erros: ==>
		Syntax Error --> const a;
		Type Error --> const a =10; a=20; --> We cann't assign the another value once we assign while initialization.
		Reference Error --> console.log(a); --> we haven't initialized the a variable.
		
	-> All the initialization and declarations on the top and use let, const important.
	
Block Scope & Shadowing: ==>
============================

	-> Block --> Multiple javascript statements in the curly braces{} is nothing but block.
	-> Block is nothing but group statments where javascript except the single statement.
		Eg: if(true) --> if condition expects statement after condition, there we can have multiple statements in block{}
	
	-> {
		var a=10;
		let b=20;  ==> Here only 'a' will be global scope and let, const in block scope. There variables cann't be accessed outside of block. only a 
		const c=30;
		}
		
	-> var a=100;
		{
		var a=10;
		let b=20;  
		const c=30;
		}
		console.log(a); ==> 10 (Here we shadowing 100 value with 10 in block.( var a variable both will be global scope)
		
	->let b=100;
		{
		var a=10;
		let b=20;  
		const c=30;
		}
		console.log(b); ==> 100.( b=100 will be script scope and b=20 will be block scope)
		
		-> const will also behaves like let.
		
		-> Shadowing is also works same for the function scope as well.
		
CLOSURES : ==>
==============
	-> function x(){
		var a = 13;
			function y(){
				console.log(a);			==> Ans: 13 because of lexical scope.
				}
			return y;
			}
			var z = x(); ==> This will store the reference to the y function and lexical scope.
			
	-> Closure is a function together bundled with the lexical scope.
	-> Closure function execution context will be removed on the execution done but even though it will have the scope in different area.
	-> Closure will remember their lexical scope, so because of this we will able to access the variables and function.
	-> Uses of closure: ->
		-> Module design patterns.
		-> Data hiding and encapsulation
		-> Currying.
		-> Functions like once
		-> memoize
		-> maintaining state in async world.
		-> setTimouts.
		-> Iterators.
		
Closures in setTimeout(): ==>
=============================
	-> function x(){
		var i=1;
		setTimeout(function(){
			console.log(i); 
			}, 1000);
			console.log("javascript");
			}
			x();
			
		output: javascript
				1
	
	-> function x(){
				for(var i=i; i<=5;i++)
				{
					setTimeout(function(){
						console.log(i);},i*1000);
				}
			}
			x();
	output : 6 6 6 6 6 (Note: Closures will store the reference of the function, so I will become 6 with in the sec. So results will be 6 for each.)
	
	Note: If we use "let" instead of "var", it will print 1 2 3 4 5. This is because of let has block scope. So every time closure with the new let variable will be stored separately.
	
	-> function x(){
				for(var i=i; i<=5;i++)
				{	
					function close(x){
					setTimeout(function(){
						console.log(x);},x*1000);
						}close(i);
				}
			}
			x();
			
			output : 1 2 3 4 5 ==> Resolved the above issue with the using another function(closure) and setTimeout inside it.
			
			
	-> Encapsulation with closure:
			function counter(){
				var count =0;
				return function increamentCounter(){
				count++;
					console.log(count);
				}
			}
			var callCounter = counter();
			callCounter();
			
		output : 1
		
	-> Disadvantages: Garbage collection due to accumulation of references a lot. Memory leaks as well.
	
	-> Garbage collector: It is a program in js engines, it will clean up the unused variables from memory.
	
First Class Functions: ==>
==========================

	-> Function statement/Function declaration:
	
		function a(){
			console.log("first statement");
			}
	-> Function expression :
	
		var x = function (){
			console.log("second statement");
			}
	-> NOTE:=> Difference between above two function declarations is hoisting. In a() function, memory is assigned to function a. So we can call the function before the function declaration. But where as function expression, memory will be assigned to variable x as undefined like any other var. So we cannot call the function x() before declaration.
	
	-> Anonymous function : Functions without the name.
			These are the functions when they are used as the values.
	
	-> Named function expression: We are defining the function with name and assigning to var.
			var x = function abc(){
			console.log("second statement");
			}
	
	-> Diff btw Params & Arguments: -->
	
		-> function xyz(param1, param2){} ==> Params
		-> xyz(1, 2) ==> arguments.
		
	-> First class functions: -->(First class citizens in javascript)
		The ability of function to use as values is know as first class function. We can pass function, return function or assigned to variables. These ability is called first class functions.
		
	-> Arrow Function: -->
	
Callback Functions: ==>
=======================
		
	-> A function which is passed as parameter to the other function is called as callback functions.
		Eg: setTimeout(function(){....},1000) ==> here we are passing function inside setTimeout function. Inside fun called as callback function.
		
	-> Each and every statement in script executed in callStack this is called as "Main Thread".
	-> document.getElementById("clickMe").addEventListener("click", function(){}) --> function inside event listern is call back function.
		when button clicked, then automatically function execution will come into call stack.
	
	-> Garbage collection and remove event listerns: --> 
		-> Event listers are heavy as because of callbacks, we don't know when they will be called in page.
		-> When we will remove the listerner then the variables will be free which are hold by the closure.
		-> We can check the event listerns scope and handlers in the dev tools "Event listerner tab".
		
Event Loop: ==>
===============
		
	-> Event loops job is continuously monitor the callstack and callback queue, whenever there is no execution context is available then it will push the callback function from the callback queue to callstack.
	
	-> js engine executes the code line by line, it won't wait for setTimeout().
	-> Browser has web API below, where the callbacks will be registered.
		-> setTimeout()
		-> DOM API.
		-> fetch()
		-> Local storage.
		-> console.
		
	-> Browser gives the access to the above API using the window(Global Object) to the JS engine.
	-> setTimeout, DOM API etc callback functions will be registered in the "Callback Queue" in JS engine.
	-> Callback functions which comes from the "promises" and "mutations observers" only registered in the "Microtask Queue". This Queue has higher priority than the "Callback Queue".
	-> Other than the above 2 callback functions, all others will be registered in the "Callback Queue".
	
Javascript Engine: ==>
======================

	-> Javascript Runtime Environment = JS Engine + Web API + Microtask Queue + Callback Queue
	-> Node Js also Javascript Runtime Environment.
	-> Javascript Engine ==> Parsing + Compilation + Execution
		-> Parsing(Code will be parsed like this) : -> Tokens + AST(Abstract syntax tree)(astexplorer.net)
		-> Compilation (AST) : -> JIT(Just in Time) Compiler.+ Interpretter
			Modern browsers will be interpreting the code line by line and compiler will optimize the code in parallely and covert into byte code.
		-> Execution: -> Memory Heap + Call Stack.
	-> Interpreter : Takes the code and executed line by line.(It is very fast)
	-> Compiler : Before executing, compiler will be compile the code into optimized code. Then code will be executed.(It has efficiency).
	-> GC(Garbage Collector): Uses Mark and sweap algorithm to clean up the Memory heap.
	-> V8 interpreter is "ignition" + "Turbo fan" is optimizing compiler.
	
setTimeout Trust issues: ==>
============================
	-> setTimeout don't guaranteed that, it will be executed after the time limit which was set on it.
	-> Because if we block the main thread more than the time limit setted, then this callback function cann't be pushed into callstack till the execution of Global execution context executed. So it will be executed after the GEC execution.
	
		Eg: console.log("Start");
			setTimeout(function(){
				console.log("In timeout");},0); --> Even though it has "0", but it should go through the callback queue and then pushed into callstack.
			console.log("End");
			
		output: start	
				End
				In timeout
	-> This is also called as concurrancy model.
	
Higher Order Functions: ==>
===========================

	-> A function which takes an another function as argument or returns a function is called as "Higher Order Functions".
	-> 
			function x(){
				console.log("x");
				}
			function y(x){
				console.log("y");
				x();
				}
		-> In above example, "Y" function is the HOF and "x" is the callback function.
		
	-> DRY -> Don't Repeat Yourself.
	-> 	const radius = [3,4,5,6];
		const area = function(radius){
						return Math.PI*radius*radius;
						}
		const circumstance = function(radius){
						return 2*Math.PI*radius;
						}
		const diameter = function(radius){
						return 2*radius;
						}
						
		const calculate = function(radius, logic){
							const output= [];
							for(let i=0; i<radius.length;i++)
							{
								output.push(logic(radius[i]));
							}
							return output;
							}
							
		console.log(calculate(radius,area);
		console.log(calculate(radius,diameter);
		console.log(radius.map(area)); 
		
		Note: -> This map function is similar to the our calculate function, we have implemented the logic map in calculate method.
					Calculate method is the "Polyfil" for the map function.
					
		Eg: Array.prototype.calculate = function(){}
		
		Note:--> map, filter, reduce functions are "Higher Order Functions".
				-----------------------------------------------------------
				
map(), filter(), reduce() : ==>
================================

	-> These are higher order functions.
		const arr = [1,2,3,4,5];
		
		function binaray(x){
			return x.toString(2);
			}
			
		arr.map(binaray);
		
		(or) arr.map((x) => x.toString(2);); ==> "if we have single line, then no need right return statement as well."
		
	-> arr.filter((x) => x%2); --> Filters the array of odd numbers.
	-> arr.filter((x) => x%2 ===0 ); --> Filters the array of even numbers.
	-> arr.reducte((acc, cur) =>{
							acc = acc+cur;
							return acc;
							},0);
							
			--> acc : accumulator, cur --> current.

Prototypical Inheritance: ==>
=============================
	-> Javascript object itself inheritated from the Prototype.
	-> One object trying to access the variables and functions of other object.
	-> let arr = ["suresh", "rohan", "srijay"]
	-> When we try to access arr.length or arr[0], we will get the values but we didn't define any methods for it.
	-> Even when we access object also, will get the access to toString() method. All these comes from Prototype.
	-> Whenever we create variables, objects, functions, arrays comes with the hidden properties or methods from Prototype.
	
	-> Note: All these hidden properties and methods are wrapped into "__proto" object. So that we can access through it.
		Eg: arr.__proto.length or arr.__proto.concact(arr2) etc.
		
		-> arr.__proto is of Array.prototype
		-> arr.__proto.__proto is of Object.prototype
		-> arr.__proto.__proto.__proto is null.
		
		Eg: Object.__proto is of Object.prototype or fun.__proto is of fuction.prototype.
		
		"This is called as prototype chaining. This chaining ends at null of object prototype."
		---------------------------------------------------------------------------------------
		
		obj2.__proto = obj1; --> we can access all the properties of obj1 from obj2.
		-> if we are accessing any variable which is in obj2, we can get those values of obj2 only. if we access which are not in obj2, then it will take the values from obj1.
		
	-> Function.prototype.mybind = fuction(){ } --> Here all the functions will have access to this mybind function.


Local & Session Storage: ==>
============================

	-> Web storage API is used to store the data inside the browser.
	-> We can store the 2 ways that is local storage & session storage.
	-> Session storage data will be deleted once the user closes the browser or tab.( 5 MB minimum data).
	-> Local storage will not be deleted even though we close the tab/broser ( This on has highest memory capacity than session storage).
	-> Data will be stored using key value pairs.
	-> This is used to optimizing the performance of the web app.
	-> It follows the same origin policy.
	-> local storage will be stored on the window object of the browser.
			localStorage.setItem("name", "Suresh");
			localStorage.getItem("name");
			localStorage.removeItem("name");
			localStorage.clear();
			
	-> localStorage accepts the string as value but if want to store the object inside it then we have to do as below.
			const user = {"name":"suresh"};
			To store: -> localStorage.setItem("user", JSON.stringify(user));
			To get: -> JSON.parse(localStorage.getItem("user"));

Event Bubbling & Capturing & Delegation: ==>
===========================================
	-> Bubbling : -> Clicking handler methods called from "Child -> Parent -> Grand Parent"
	-> Capturing: -> "Grand Parent -> Parent -> Child"
	
		Eg: addEventHandler('click', ()=> {},usecapture(true/false))
		
		Note:-> If we pass as "true", then event capturing mode is enabled and events are captured. Incase of no value or false, events will bubbled.
		
	-> Both Bubbling & Capturing will be called on depending on usecapture value.
	-> e.stopPropagation(): -> This will stop the propagation cycle.
	
			-----------------------------------------------------------------------------
			<body>
				<div id="grandParent">
					<div id="Parent">
						<div id="child"></div>
					</div>
				</div>
			</body>
			<script>
				document.querySelector("#grandParent").addEventListener('click', ()=>{
					console.log("grand parent clicked");
				},true) // true then trickling, without any value or false event bubbling.
				document.querySelector("#Parent").addEventListener('click', (e)=>{
					e.stopPropagation(); // This will stop the propagation cycle.
					console.log("parent clicked");
				},true)
				document.querySelector("#child").addEventListener('click', ()=>{
					console.log("child clicked");
				},true)
			</script>
			-----------------------------------------------------------------------------
			
	-> "Delegation:" -> Instead of attaching the event listerners to individual elements, we can attach it to parent of elements. This is called 	Delegation". This is done using Bubbling events.
	-> It saves lot of memory as we are attaching single event instead of multiple elements.
	-> Writing less code is also benefit.
	-> DOM manupulation is very effective with this event delegation.
	
	-> Limitations: Few events like Blur, focus, resize will not have event bubbling mechanism.
	-> e.stopPropagation() shouldn't be used while using event delegation.
	
			-------------------------------------------------------------------------------
			<body>
				<div>
					<ul id="category">
						<li id="laptop">Laptop</li>
						<li id="mobile">Mobile</li>
						<li id="fashion">Fashion</li>
					</ul>
				</div>
				<div id="form">
					<input type="text"  id="name" data-touppercase>
					<input type="text"  id="mobile">
					<input type="text"  id="pan">
				</div>
			</body>
			<script>
				// document.querySelector("#category").addEventListener('click', (e)=>{
				//         console.log(e.target.id+ " "+ e.target.tagName);
				//         window.location.href = "/"+e.target.id;
				// })
				document.querySelector("#form").addEventListener('keyup', (e)=>{
					if(e.target.dataset.touppercase != undefined){
						e.target.value = e.target.value.toUpperCase();
					}
				})
			</script>


Understanding call, bind, apply: ==>
====================================
	-> Function borrowing : -> If we wanted to call the functions of other objects, we can use of "Call" method. Which is available all the objects of javascript. This is called function borrowing.
	
	-> The only difference between call and apply method is passing the extra arguments other than the this reference is that in call will pass it as comma separated params where as in case of apply will pass in array.
	
	-> Eg: completeName.call(name, "Sircilla", "Telangana");
		   completeName.apply(name2, ["Sircilla", "Telangana"]);
		   
	-> Bind methhod is also similar to the call method but the difference is it creates the copy of the method and returns it. It can be called later.
		It doesn't invoke the directly the method instead it returns the copy of it.
		Eg: let bindCompleteName = completeName.bind(name, "Sircilla", "Telangana");
		
	----------------------------------------------------------------------------------------------------------
	let name ={
        firstName : "Suresh",
        lastName : "Dusa",
        fullName : function(){
            console.log("Full Name :"+ this.firstName + " "+ this.lastName);
        }
    }
    let name2 ={
        firstName : "Suresh",
        lastName : "Dusa",
         }
    name.fullName();
    //Function borrwoing
    name.fullName.call(name2); // In fullName function, now name2 object will be accessible.

    // Second way to use Call Method.
    let completeName = function(hometown, state){
        console.log(this.firstName + " "+ this.lastName+" "+this.hometown + " "+ this.hometown);
    }
    completeName.call(name);
    completeName.call(name2);
    completeName.call(name, "Sircilla", "Telangana");

    // Only difference between call and apply method is passing the arguments.
    // Here will pass arguments in an array.
    completeName.apply(name2, ["Sircilla", "Telangana"]);

    let bindCompleteName = completeName.bind(name, "Sircilla", "Telangana");
	-------------------------------------------------------------------------------------------------------------
	
Polyfill for Bind: ==>
======================

	 // Polyfill for Bind

    Function.prototype.myBind = function(...args){ // these arguments which we are passing while calling myBind method
        let obj = this;
        params = args.slice(1); // will remove the first element from array and returns rest
        return function(...args2){ // these args which we are passing while call polyFillBind method.
            obj.apply(args[0],[...params, ...args2]);
        }
    }

    let polyFillBind = completeName.myBind(name, "Sircilla");
    polyFillBind("Telangana");
	
Debouncing: ==>
===============

	-> Any search functionality, we can implement the concept of debouncing.
	-> For each and every key press, if we make the service call it will be costlier. So we can have some delay in making calls. That is achived using the concept of debouncing.
	-> Below is the code sample of debouncing.
	
	----------------------------------------------------------
	<title>Debouncing</title>
	</head>
	<body>
		<input type="text" onkeyup="deBounce()">
	</body>
	<script>
	let counter =0;
	const getData = () => {
		console.log("Fetching Data==="+counter++);
	}

	const betterGetData = function(fn, d){
		let timer;
		return function(){
			let context = this,
			args = arguments;
			clearTimeout(timer);
			timer = setTimeout(() => {
				getData.apply(context, arguments)
			}, d)
		}
	}

	const deBounce = betterGetData(getData, 300);
	----------------------------------------------------------
	
	
Throttling: ==>
===============

	----------------------------------------------------------------
	const resizeLog = () => {
	console.log("Window resized ===="+counter++);
	}
	
	const resizeThrottleImpl = (fn, d) => {
		let flag = true;
		return function(){
			if(flag){
			let context = this, args = arguments;
			fn.apply(context, args);
			flag = false;
			setTimeout(() => {
				flag = true;
			}, d);
			}
		
		}
	}
	const resizeThrottle = resizeThrottleImpl(resizeLog,300);

	window.addEventListener("resize", resizeThrottle);

Debouncing vs Throttling in JS: ==>
===================================

	-> This concept is used for the improvement of performance.
	-> Debouncing is time difference between the keystrokes or any events .
	-> Throttling is time difference between the last service call and current service call.
	-> In most of search scenarios, debouncing is most preferable( flipkart, amazon, walmart uses debouncing).


Currying: ==>
=============

	let multiply = function(x, y){
						console.log( x * y);
						}
						
	let multiplyByTwo = multiply.bind(this, 2); --> this is function currying.
	multiplyByTwo(5); 
	
	Note: --> Once we call multiplyByTwo(5), it will call multiply method with the x values 2 and y values as 5.
	
	-> With the closures also, we can achieve the currying.
	
	Eg:  let multiply = function (x) {
							return function(y){
									console.log(x*y);
									}
									}
		let multiplyByTwo = multiply(2);
		multiplyByTwo(5);
		

CORS Preflight: ==>
===================
	-> CORS : -> Cross origin resource sharing.
	-> Every request to the server first made with the preflight(OPTIONS) to check whether the given server is valid or not.

Async vs Defer: ==> (Defer is the best choice for loading the script)
==================
	
	-> In conventional script loading, it will pause the execution of html rendering till the script loaded. Where as if we use async, it won't pause the parsing of html content and it will load the script parallely and once the script loaded then execution starts. Where as incase of defer, it won't pause the html content execution and parallely downloads the script then it will be executed on the html DOM content loaded.

	-> async and defer both load JavaScript asynchronously without render blocking, but async executes as soon as possible while defer runs in sequence toward the end of the loading process, just before the DOMContentLoaded event.

	-> Async
		Downloads in the background at a low priority (same as defer)
		Can interrupt page rendering to execute
		Executes as soon as possible and in no particular order
	-> Defer
		Downloads in the background at a low priority (same as async)
		Won't interrupt page rendering to execute
		Executes in sequence just before the DOMContentLoaded event
		
Promises: ==>
=============

	-> Function inside then is --> resolve()
	-> Function inside catch is --> reject()
	
	-------------------------------------------------------
	function sample(){

    return new Promise((resolve, reject) => {
        setTimeout(() => {
            let err = true;
            if(!err){
                console.log("Function : Resolved Called");
                resolve();
            }else{
                console.log("Function : Reject Called");
                reject("Error returned from rejection");
            }
        },2000);
    })
	}

	sample().then(function(){
		console.log("In Resolved====");
	}).catch(function(error){
		console.log("In Rejected===="+error);
	})
	--------------------------------------------------------
	
	-> Promise.all([]).then((values) => {})
	-> Promise.all() will the list of promises or normal values also. Check below example.
	
		Eg: const promise1 = Promise.resolve(1);
			const promise2 = 23;
			const promise3 = new Promise((resolve, reject) => {
				setTimeout(resolve,100, "Promise3");
			})

			Promise.all([promise1, promise2, promise3]).then((values) =>{
				console.log(values);
			})
	-> In Promise all, even if one promise rejected then complete promise all will be rejected.
	
	-> Polyfill for Promise.all(): -->
	   --------------------------------------------------------------------

		Promise.myAllPromise = function(values){
		return new Promise((resolve, reject) => {
			let results = [];
			let completed = 0;
			values.forEach((value, index) => {
				Promise.resolve(value).then((result) => {
					completed++;
					results[index] = result;
					if(completed == values.length){
						resolve(results);
					}
				}).catch((error) => {
					reject(error);
				})
			});
		})
	}

	Promise.myAllPromise([promise1, promise2, promise3,"My Polyfil Promise"]).then((values) =>{
		console.log(values);
	})
	---------------------------------------------------------------------------
		
				

	

	
	