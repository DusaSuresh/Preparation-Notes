1) Two Sum:
-----------
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

	class Solution {
		public int[] twoSum(int[] nums, int target) {
			int newArr[] = new int[2];
		 for(int i=0; i<nums.length; i++){
			 for(int j=i+1; j<nums.length;j++){
				 if(nums[i]+nums[j] == target){
					 newArr[0] = i;
					 newArr[1] = j;
				 }
			 }
		 }  
		 return newArr; 
		}
	}
	
	Effient Way:
	------------
	
	public class TwoSum {
    public static int[] findTwoSum(int[] list, int sum) {
      Map<Integer, Integer> hmap = new HashMap<>();
        for (int i=0; i<list.length; i++) 
        {
            int req = sum - list[i];
            if (hmap.get(req) != null) 
                return new int[]{i, hmap.get(req)};

            hmap.put(list[i], i);
        }

        return null;    
        //throw new UnsupportedOperationException("Waiting to be implemented.");
    }
======================================================================================================================================================

Merge two names:
----------------
import java.util.*;
public class MergeNames {
    
    public static String[] uniqueNames(String[] names1, String[] names2) {
      Set<String> set1 = new HashSet(Arrays.asList(names1));
      Set<String> set2 = new HashSet(Arrays.asList(names2));
      Set<String> union = new HashSet(set1);
      union.addAll(set2);
      return union.toArray(new String[union.size()]);
        //throw new UnsupportedOperationException("Waiting to be implemented.");
    }
    
    public static void main(String[] args) {
        String[] names1 = new String[] {"Ava", "Emma", "Olivia"};
        String[] names2 = new String[] {"Olivia", "Sophia", "Emma"};
        System.out.println(String.join(", ", MergeNames.uniqueNames(names1, names2))); // should print Ava, Emma, Olivia, Sophia
    }
}

======================================================================================================================================================

2) Reverse Integer:
-------------------

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

	class Solution {
		public int reverse(int x) {
			boolean isNeg = x < 0 ? true: false;
			if(isNeg){
				x = x * -1;
			}
			long rev =0;
			while(x>0){
				int rem = x % 10;
				rev = rev * 10 + rem;
				x = x / 10;
			}
			 if (rev > Integer.MAX_VALUE) {
				return 0;
			}
			return (int)(isNeg ? -rev: rev);
		   
		}
	}
======================================================================================================================================================

3) Palindrome Number:
=====================
Given an integer x, return true if x is a palindrome, and false otherwise.

	class Solution {
		public boolean isPalindrome(int x) {
			int temp = x;
			int rev = 0;
			if(x < 0) return false;
			while(x>0){
				rev = rev * 10 + x%10;
				x = x/10;
			}
			if(temp == rev) return true;
			return false;
	}
	}
	
======================================================================================================================================================

4) Search Insert Position:(Binary search applied on the sorted array)
==========================

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Solution: Binary search is always works on the sorted array. If any question with sorted array and find target input will have to do binary search.
		  1) Find Middle index mid = (low + high)/2;
		  2) If a[mid] == target return mid;
		  3) if a[mid] < target -> then target will be right side --> low = mid + 1( high will remain same)
		  4) if a[mid] > target -> then target will be left side --> high = mid - 1( low will remain same)
		  
	class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
       
        
        while(low <= high){
             int mid = (low+high)/2;
            if(nums[mid] == target)
            return mid;
            if(nums[mid] < target){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        return low;
    }
}

Note: Finally here low returned when the target is not found, then this low will be the position where the target element can be inserted.


======================================================================================================================================================

5) Find Pivot Index:
====================

Given an array of integers nums, calculate the pivot index of this array.
The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.
If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.
Return the leftmost pivot index. If no such index exists, return -1.

Solution:
	1) Find sum of all numbers first.
	2) leftsum = 0, rightsum = sum.
	3) rightsum = rightsum - nums[i]
	4) rightsum == leftsum --> return i;
	5) leftsum = leftsum + nums[i]
	
	class Solution {
		public int pivotIndex(int[] nums) {
			int sum = 0;
			for(int num : nums){
				sum+= num;
			}
			int leftSum = 0, rightSum = sum;
			for(int i=0; i<nums.length; i++){
			   rightSum = rightSum - nums[i];
			   if(rightSum == leftSum){
				   return i;
			   }
			   leftSum = leftSum + nums[i];
			}
			return -1;
			
		}
	}

=====================================================================================================================================================
		  
6) Running Sum of 1d Array:
===========================

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

	class Solution {
		public int[] runningSum(int[] nums) {
			int newArr[] = new int[nums.length];
			for(int i=0; i < nums.length; i++){
				int sum = 0;
				for(int j=0; j <= i; j++){
					sum+=nums[j];
				}
				newArr[i] = sum;
			}
			return newArr;
		}
	}
	
======================================================================================================================================================
7) Bubble Sorting: O(n2)
========================
	- In this sorting, outer loop will be the length of the array and inner loop every adjusent elements will be compared till it sorted)

for(int i=0; i<n-1; i++)
	{
		boolean isSwapped = false; --> This is for optimization, if array is already sorted, then we have come out of the loop.
		for(int j=0; j<n-i-1; j++){
		{
			 if(a[j+1] < a[j])
			 {
			 isSwapped = true;
			 swap(a, j+1, j);
			 }
		}
	if(!swapped)
	break;
	}
	
void swap(int a[], int i, int j)
{
	int temp = a[i];
	a[i] = a[j];
	a[j] = temp;
	
}


====================================================================================================================================================

8) Insertion Sort: O(n2)
=========================
	- Inner loop will be run in reverse direction.
	- int i -> value should start from '1' where j will be '0'

for(int i=1; i<n; i++)
	int j = i-1;
	int temp = a[i];
	while(j >= 0 && a[j] > temp)
	{
		a[j+1] = a[j];
		j--;
	}
	a[j+1] = temp;
	}
	
=====================================================================================================================================================

9) Selection Sort: O(n2)
========================
	- Inner loop will be run in normal direction.
	- Here in array we need to take the minimum element and swap with the first element of unsorted array.
	- Inner loop will identify the min element in unsorted array. If it is found, then need to swap.
	
	for(int i=0; i<n-1; i++)
	{
		int min = i;
		for(int j= i+1; j<n; j++)
		{
			if(a[j] < a[min] )
			min = j;
		}
		if(min != i){
			swap(a, min, i);
		}
	}
	
=====================================================================================================================================================

10) Quick Sort : O(nlogn)
========================

	- It will work as, in class of students select any single student as pivot and will check for others whether they are taller than student or not.
	- If taller then go back side otherwise come forward, in the same it will work.
	
	public int partition(int low, int high)
	{
		int pivot = a[low];
		int i = low;
		int j = high;
		
		while (i<j)
		{
			while(a[i]<=pivot) i++;
			while(a[j]>pivot) j--;
			if(i<j)
			{
			swap(a, i, j);
		}
		swap(a, j, l);
		return j;
	}
	
	quickSort(l, h){
		if(l < h)
		{
		int pivot = partition(l, h);
		quickSort(l, pivot - 1);
		quickSort(pivot+1, h);
		}
	}
	
	-> Best case when we get the first pivot in the middle of array , then it will be best case.
	-> Worst case when we give the sorted array to quicksort, then it will be O(n2).
	
=====================================================================================================================================================

11) Merge Sort:
===============
	- It works on divide and conquer technique.
	
	void sort(int arr[], int l, int r)
    {
        if (l < r) {
            // Find the middle point
            int m = (l + r ) / 2;
 
            // Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);
 
            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
	
	void merge(int arr[], int l, int mid, int r)
    {
        int i = l;
		int j = mid + 1;
		ink k = l;
    }
	
====================================================================================================================================================

12) Search in rotated array:
============================

	- As in binary search identifying the middle element and compare with the left and right parts of array.
	- If mid element is less than the first element in the left of array then right side will be sorted array else left side will be sorted.
	
	binarySearch(int a[], int key)
	{
		int low = 0; int high = a.length -1;
		
		while(low < high)
		{
		int mid = (low+high)/2;
		if(a[mid] == key) return mid;
		
		if(a[low] < a[mid])
		{
			if(key >= a[low] && key< a[mid])
			{
			high = mid - 1;
			}else{
			low = mid + 1;
			}
		}else{
			if( key > a[mid] && key < a[high])
			{
			low = mid + 1;
			}else{
			high = mid -1;
			}
		}
	}return -1;
}

====================================================================================================================================================

13) Kth largest element in array:
=================================

	- In java by default PriorityQue is implemented with the min heap, means small to largest.

	kthLargestElement(int a[], int k)
	{
		PriorityQueue<Integer> pq = new PriorityQue<>();
		for(int i=0; i< k; i++)
		{
		pq.add(a[i]);
		}
		
		for(int i=k; i< a.length; i++)
		{
			if(pq.peek()<a[i])
			{
			pq.pop();
			pq.add(a[i]);
			}
		}
		return pq.peek();
	}
	 
	- Kth Largest -- means min heap (PriorityQueue<Integer> pq = new PriorityQue();)
	- kth Smallest -- means max heap ( PriorityQueue<Integer> pq = new PriorityQue<>(Collections.reverseOrder());)
	- Collections.reverseOrder() --> This will make min heap to max heap.
	
	- [4, 6, 1, 10, 15] --> key = 3 --> Ans: 6
	
======================================================================================================================================================

14) Validate Parenthesis:
==========================

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack();

        for(int i=0; i<s.length(); i++){
            if(isOpenParanthesis(s.charAt(i))){
                st.push(s.charAt(i));
            }else{
                if(st.isEmpty()){
                    return false;
                }else if(!isValidParenthesis(s.charAt(i), st.peek())){
                    return false;
                }else{
                    st.pop();
                }
            }
        }
        return st.isEmpty();
    }

    public static boolean isOpenParanthesis(char c){
        return c == '(' || c == '{' || c == '[';
    }

     public static boolean isValidParenthesis(char c, char s){
         boolean result = (c == ')' && s == '(') || (c == '}' && s == '{') || (c == ']' && s == '[');
        return result;
    }
}

=====================================================================================================================================================
		
15) Set Matrix Zeroes : Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
------------------------------------------------------------------------------------------------------------------------

	- Solution: First need to traverse through the matrix, if we found any element as '0', then we need to change value of that row and cols values to '-1' where the value is not equal to '0'
	
	- Again we need to traverse through matrix and set values as '0' for which we marked as '-1' in above step.
	
	Brute Force:
	
	class Solution {
    public void setZeroes(int[][] matrix) {
        int rows = matrix.length, cols = matrix[0].length;

        for(int i=0; i < rows; i++){
            for(int j=0; j < cols; j++){
                if(matrix[i][j] == 0 ){
                    for(int m=0; m < cols; m++){
                        if(matrix[i][m] != 0)
                        matrix[i][m] = -1;
                    }
                    for(int n=0; n < rows; n++){
                        if(matrix[n][j] != 0)
                        matrix[n][j] = -1;
                    }
                }
            }
        }
        for(int i=0; i < rows; i++){
            for(int j=0; j < cols; j++){
                if(matrix[i][j] == -1)
                matrix[i][j] = 0;
            }
        }
    }
}

===================================================================================================================================================

16) Longest common prefix:
--------------------------

class Solution {
    public String longestCommonPrefix(String[] strs) {
        String prefix = strs[0];
        if(strs.length == 0) return "";
        for(int i=1 ; i < strs.length; i++){
            while(strs[i].indexOf(prefix) != 0)
            {
                prefix = prefix.substring(0, prefix.length() - 1);
                System.out.println(prefix);
                if(prefix.isEmpty()) return "";
            }
        }
        return prefix;
    }
}

=====================================================================================================================================================

17) 
		
		
		
		

	 
		